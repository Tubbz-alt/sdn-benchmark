syntax = "proto2";

option java_package = "org.openflow.northboundapi.proto";


message OFHelloPB {						//  0
}

message OFErrorPB {                     //  1

  enum OFErrorTypePB {
    OFPET_HELLO_FAILED        = 0;
    OFPET_BAD_REQUEST         = 1;
    OFPET_BAD_ACTION          = 2;
    OFPET_FLOW_MOD_FAILED     = 3;
    OFPET_PORT_MOD_FAILED     = 4;
    OFPET_QUEUE_OP_FAILED     = 5;
    OFPET_VENDOR_ERROR        = 0xB0C2;
  }

  enum OFHelloFailedCodePB {
    OFPHFC_INCOMPATIBLE       = 0;
    OFPHFC_EPERM              = 1;
  }

  enum OFBadRequestCodePB {
    OFPBRC_BAD_VERSION        = 0;
    OFPBRC_BAD_TYPE           = 1;
    OFPBRC_BAD_STAT           = 2;
    OFPBRC_BAD_VENDOR         = 3;
    OFPBRC_BAD_SUBTYPE        = 4;
    OFPBRC_EPERM              = 5;
    OFPBRC_BAD_LEN            = 6;
    OFPBRC_BUFFER_EMPTY       = 7;
    OFPBRC_BUFFER_UNKNOWN     = 8;
  }

  enum OFBadActionCodePB {
    OFPBAC_BAD_TYPE           = 0;
    OFPBAC_BAD_LEN            = 1;
    OFPBAC_BAD_VENDOR         = 2;
    OFPBAC_BAD_VENDOR_TYPE    = 3;
    OFPBAC_BAD_OUT_PORT       = 4;
    OFPBAC_BAD_ARGUMENT       = 5;
    OFPBAC_EPERM              = 6;
    OFPBAC_TOO_MANY           = 7;
    OFPBAC_BAD_QUEUE          = 8;
  }

  enum OFFlowModFailedCodePB {
    OFPFMFC_ALL_TABLES_FULL   = 0;
    OFPFMFC_OVERLAP           = 1;
    OFPFMFC_EPERM             = 2;
    OFPFMFC_BAD_EMERG_TIMEOUT = 3;
    OFPFMFC_BAD_COMMAND       = 4;
    OFPFMFC_UNSUPPORTED       = 5;
  }

  enum OFPortModFailedCodePB {
    OFPPMFC_BAD_PORT          = 0;
    OFPPMFC_BAD_HW_ADDR       = 1;
  }

  enum OFQueueOpFailedCodePB {
    OFPQOFC_BAD_PORT          = 0;
    OFPQOFC_BAD_QUEUE         = 1;
    OFPQOFC_EPERM             = 2;
  }

  optional uint32		errorType       = 1 [default = 0xFFFF];
  optional uint32		errorCode       = 2 [default = 0];
  optional uint32		vendor          = 3 [default = 0];
  optional uint32		vendorErrorType = 4 [default = 0];
  optional uint32		vendorErrorCode = 5 [default = 0];

  optional bytes		error			= 6;

  optional string		errorString		= 7;		// alternative error representation
  optional OFMessagePB	ofMessage		= 8;		// alternative error representation
}

message OFEchoRequestPB {               //  2
  optional bytes payload = 1;
}

message OFEchoReplyPB {                 //  3
  optional bytes payload = 1;
}

message OFVendorPB {                    //  4
  required uint32 vendor	 = 1;
  optional bytes  vendorData = 2;
}

message OFFeaturesRequestPB {           //  5
}

message OFFeaturesReplyPB {             //  6
  required uint64			datapathId		= 1;
  required uint32			buffers			= 2;
  required uint32			tables			= 3;
  required uint32			capabilities	= 4;
  required uint32			actions			= 5;
  repeated OFPhysicalPortPB ports			= 6;
}

  message OFPhysicalPortPB {

    enum OFPortConfigPB {
        OFPPC_PORT_DOWN    = 0x001;	// 1 << 0, "port-down (0x1)"
        OFPPC_NO_STP       = 0x002;	// 1 << 1, "no-stp (0x2)"
        OFPPC_NO_RECV      = 0x004;	// 1 << 2, "no-recv (0x4)"
        OFPPC_NO_RECV_STP  = 0x008;	// 1 << 3, "no-recv-stp (0x8)"
        OFPPC_NO_FLOOD     = 0x010;	// 1 << 4, "no-flood (0x10)"
        OFPPC_NO_FWD       = 0x020;	// 1 << 5, "no-fwd (0x20)"
        OFPPC_NO_PACKET_IN = 0x040;	// 1 << 6, "no-pkt-in (0x40)"
    }

    enum OFPortStatePB {
		option allow_alias = true;	// requires protobuf >= 2.5.0

        OFPPS_LINK_DOWN   = 0x001;	// 1 << 0, "link-down (0x1)"
        OFPPS_STP_LISTEN  = 0x000;	// 0 << 8, "listen (0x0)"
        OFPPS_STP_LEARN   = 0x100;	// 1 << 8, "learn-no-relay (0x100)"
        OFPPS_STP_FORWARD = 0x200;	// 2 << 8, "forward (0x200)"
        OFPPS_STP_BLOCK   = 0x300;	// 3 << 8, "block-broadcast (0x300)"
        OFPPS_STP_MASK    = 0x300;	// 3 << 8, "block-broadcast (0x300)"
    }

    enum OFPortFeaturesPB {
        OFPPF_10MB_HD    = 0x001;	// 1 << 0, "10mb-hd (0x1)"
        OFPPF_10MB_FD    = 0x002;	// 1 << 1, "10mb-fd (0x2)"
        OFPPF_100MB_HD   = 0x004;	// 1 << 2, "100mb-hd (0x4)"
        OFPPF_100MB_FD   = 0x008;	// 1 << 3, "100mb-fd (0x8)"
        OFPPF_1GB_HD     = 0x010;	// 1 << 4, "1gb-hd (0x10)"
        OFPPF_1GB_FD     = 0x020;	// 1 << 5, "1gb-fd (0x20)"
        OFPPF_10GB_FD    = 0x040;	// 1 << 6, "10gb-fd (0x40)"
        OFPPF_COPPER     = 0x080;	// 1 << 7, "copper (0x80)"
        OFPPF_FIBER      = 0x100;	// 1 << 8, "fiber (0x100)"
        OFPPF_AUTONEG    = 0x200;	// 1 << 9, "autoneg (0x200)"
        OFPPF_PAUSE      = 0x400;	// 1 << 10, "pause (0x400)"
        OFPPF_PAUSE_ASYM = 0x800;	// 1 << 11, "pause-asym (0x800)"
    }

    required uint32 portNumber			= 1;
    required uint64 hardwareAddress		= 2;
    required string name				= 3;
    required uint32 config				= 4;
    required uint32 state				= 5;
    required uint32 currentFeatures		= 6;
    required uint32 advertisedFeatures	= 7;
    required uint32 supportedFeatures	= 8;
    required uint32 peerFeatures		= 9;
  }

message OFGetConfigRequestPB {          //  7
}

message OFGetConfigReplyPB {            //  8
  required uint32 flags			 = 1;
  required uint32 missSendLength = 2;
}

message OFSetConfigPB {                 //  9
  required uint32 flags			 = 1;
  required uint32 missSendLength = 2;
}

enum OFPacketInReasonPB {
  NO_MATCH = 0;
  ACTION   = 1;
}

message OFPacketInPB {                  // 10

  optional sint32             bufferID   = 1 [default = -1];
  required uint32             inPort     = 2;
  required OFPacketInReasonPB reason     = 3;
  optional bytes              packetData = 4;
  optional OFMatchPB		  ofMatch    = 5;
}

message OFFlowRemovedPB {               // 11

  enum OFFlowRemovedReasonPB {
	OFPRR_IDLE_TIMEOUT = 0;
	OFPRR_HARD_TIMEOUT = 1;
	OFPRR_DELETE	   = 2;
  }

  required OFMatchPB			 match				 = 1;
  required uint64				 cookie				 = 2;
  required uint32				 priority			 = 3;
  required OFFlowRemovedReasonPB reason				 = 4;
  required uint32				 durationSeconds	 = 5;
  required uint32				 durationNanoseconds = 6;
  required uint32				 idleTimeout		 = 7;
  required uint64				 packetCount		 = 8;
  required uint64				 byteCount			 = 9;
}

message OFPortStatusPB {                // 12

  enum OFPortReasonPB {
	OFPPR_ADD	 = 0;
	OFPPR_DELETE = 1;
	OFPPR_MODIFY = 2;
  }

  required uint32			reason = 1;
  required OFPhysicalPortPB desc   = 2;
}

  enum OFPortPB {
  	OFPP_MAX        = 0xff00;
    OFPP_IN_PORT    = 0xfff8;
    OFPP_TABLE      = 0xfff9;
    OFPP_NORMAL     = 0xfffa;
    OFPP_FLOOD      = 0xfffb;
    OFPP_ALL        = 0xfffc;
    OFPP_CONTROLLER = 0xfffd;
    OFPP_LOCAL      = 0xfffe;
    OFPP_NONE       = 0xffff;
  }

message OFPacketOutPB {                 // 13
  optional sint32	  bufferId		 = 1 [default = -1];
  required uint32	  inPort		 = 2;
  repeated OFActionPB actions		 = 4;
  optional bytes	  packetData	 = 5;
}

import "SBOFMatchesPB.proto";
import "SBOFActionsPB.proto";

message OFFlowModPB {                   // 14

  enum OFFlowModCommandPB {
    OFPFC_ADD           = 0;
	OFPFC_MODIFY        = 1;
    OFPFC_MODIFY_STRICT = 2;
    OFPFC_DELETE        = 3;
    OFPFC_DELETE_STRICT = 4;
  }

  enum OFPFlowModFlagsPB {
  	OFPFF_SEND_FLOW_REM = 0x01;	// 1 << 0; Send flow removed message when flow expires or is deleted
  	OFPFF_CHECK_OVERLAP = 0x02; // 1 << 1; Check for overlapping entries first
  	OFPFF_EMERG			= 0x04; // 1 << 2; This is for emergency
  }

  required OFMatchPB  match		  =  1;
  optional uint64	  cookie	  =  2 [default = 0];
  required uint32	  command	  =  3;
  optional uint32	  idleTimeout =  4 [default = 0];
  optional uint32	  hardTimeout =  5 [default = 0];
  optional uint32	  priority	  =  6 [default = 0];
  optional sint32	  bufferId	  =  7 [default = -1];
  optional uint32	  outPort	  =  8 [default = 0xffff];
  optional uint32	  flags		  =  9 [default = 0];	// OR'd OFPFlowModFlagsPB
  repeated OFActionPB actions	  = 10;
}

message OFPortModPB {                   // 15
  required uint32 portNumber	  = 1;
  required uint64 hardwareAddress = 2;
  required uint32 config		  = 3;
  required uint32 mask			  = 4;
  required uint32 advertise		  = 5;
}

import "SBOFStatisticsPB.proto";

message OFBarrierRequestPB {            // 18
}

message OFBarrierReplyPB {              // 19
}

message OFQueueGetConfigReplyPB {       // 20

  message OFPacketQueuePB {

	message OFQueuePropPB {

	  enum OFQueuePropTypePB {
        OFPQT_NONE     = 0;
        OFPQT_MIN_RATE = 1;
	  }

	  required OFQueuePropTypePB type	= 1;
	  required uint32			 length = 2;
	  required uint32			 rate	= 3;
	}

	required uint32 queueId			  = 1;
	repeated OFQueuePropPB properties = 2;
  }

  required uint32		   portNumber = 1;
  repeated OFPacketQueuePB queues	  = 2;
}

message OFQueueGetConfigRequestPB {     // 21
  required uint32 portNumber = 1;
}

message OFSwitchStatusPB {

  enum SwitchStatusPB {
  	ADDED		 = 0;
  	REMOVED		 = 1;
  	ACTIVATED	 = 2;
  	CHANGED		 = 3;
  	PORT_CHANGED = 4;
  }

  enum PortChangeTypePB {
	ADD			 = 0;
	OTHER_UPDATE = 1;
	DELETE		 = 2;
	UP			 = 3;
	DOWN		 = 4;
  }

  required SwitchStatusPB	status		   = 1;
  repeated OFPhysicalPortPB ports		   = 2;
  optional PortChangeTypePB portChangeType = 3;
}

message OFMessagePB {

  enum OFTypePB {
    HELLO                    =  0;
    ERROR                    =  1;
    ECHO_REQUEST             =  2;
    ECHO_REPLY               =  3;
    VENDOR                   =  4;
    FEATURES_REQUEST         =  5;
    FEATURES_REPLY           =  6;
    GET_CONFIG_REQUEST       =  7;
    GET_CONFIG_REPLY         =  8;
    SET_CONFIG               =  9;
    PACKET_IN                = 10;
    FLOW_REMOVED             = 11;
    PORT_STATUS              = 12;
    PACKET_OUT               = 13;
    FLOW_MOD                 = 14;
    PORT_MOD                 = 15;
    STATS_REQUEST            = 16;
    STATS_REPLY              = 17;
    BARRIER_REQUEST          = 18;
    BARRIER_REPLY            = 19;
    QUEUE_GET_CONFIG_REQUEST = 20;
    QUEUE_GET_CONFIG_REPLY   = 21;

	SWITCH_STATUS			 = 99;

    _UNKNOWN_                = 0x7FFFFFFF;
  }

  // Common header members

  optional OFTypePB                  ofType                  =  1 [default = _UNKNOWN_];
  optional uint32                    version                 =  2 [default = 0x01];
  optional uint32                    xid                     =  3 [default = 0];

  // Message-specific content; only one of the following should be specified.

  optional OFHelloPB                 ofHello                 =  4;
  optional OFErrorPB                 ofError                 =  5;
  optional OFEchoRequestPB           ofEchoRequest           =  6;
  optional OFEchoReplyPB             ofEchoReply             =  7;
  optional OFVendorPB                ofVendor                =  8;
  optional OFFeaturesRequestPB       ofFeaturesRequest       =  9;
  optional OFFeaturesReplyPB         ofFeaturesReply         = 10;
  optional OFGetConfigRequestPB      ofGetConfigRequest      = 11;
  optional OFGetConfigReplyPB        ofGetConfigReply        = 12;
  optional OFSetConfigPB             ofSetConfig             = 13;
  optional OFPacketInPB              ofPacketIn              = 14;
  optional OFFlowRemovedPB           ofFlowRemoved           = 15;
  optional OFPortStatusPB            ofPortStatus            = 16;
  optional OFPacketOutPB             ofPacketOut             = 17;
  optional OFFlowModPB               ofFlowMod               = 18;
  optional OFPortModPB               ofPortMod               = 19;
  optional OFStatisticsRequestPB     ofStatisticsRequest     = 20;
  optional OFStatisticsReplyPB       ofStatisticsReply       = 21;
  optional OFBarrierRequestPB        ofBarrierRequest        = 22;
  optional OFBarrierReplyPB          ofBarrierReply          = 23;
  optional OFQueueGetConfigReplyPB   ofQueueGetConfigReply   = 24;
  optional OFQueueGetConfigRequestPB ofQueueGetConfigRequest = 25;

  optional OFSwitchStatusPB			 ofSwitchStatus			 = 99;
}

message SBOFMessagePB {

  required uint64      datapathID = 1;
  required OFMessagePB ofMessage  = 2;

}


//Local Variables:
//tab-width: 4
//End:
